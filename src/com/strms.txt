
1.

 List<String> str= Arrays.asList("aaa","","asa","a","tdff");
       Long s= str.stream().filter(x->x.isEmpty()).count();
        System.out.println(s);

ouput:
--------
         1

2.  List<String> as= Arrays.asList("adff","dff","dsffffffffffff","Df","","");

    Long a=   as.stream()
                .filter(n->n.length()>1)
                .count();
        System.out.println(a);
ouput:
---------
         4

3.    List<Emp> emps= Arrays.asList(
                new Emp(1,"bala",1000),
                new Emp(2,"krishnan",2000),
                new Emp(3,"saha",3000),
                new Emp(4,"sanjay",4000));

     emps.stream().filter(e->e.getSal()>2000 && e.getName().endsWith("a")).forEach(System.out::println);
ouput:
---------
Emp{id=3, name='saha', sal=3000.0}


4.     List<Emp> emps= new ArrayList<>();
        emps.add(new Emp(1,"balaa",200));
        emps.add(new Emp(2,"krishnan",200));
        emps.add(new Emp(3,"dadafsf",200));
        emps.add(new Emp(4,"fgfgfdgdfbg",200));

       List<Emp> emps1= emps.stream().filter(f->f.getName().length()>6 && f.getName().length()<12).collect(Collectors.toList());
        System.out.println(emps1);

ouput:
---------
[Emp{id=2, name='krishnan', sal=200.0}, Emp{id=3, name='dadafsf', sal=200.0}, Emp{id=4, name='fgfgfdgdfbg', sal=200.0}]

  





5. List<String> as= Arrays.asList("usa","india","uk","america");
       String s= as.stream()
                .map(e->e.toUpperCase())
                .collect(Collectors.joining("|"));

        System.out.println(s);
ouput:
---------
     USA|INDIA|UK|AMERICA


6.  List<Integer> list= new ArrayList<>();
        list.add(1);
        list.add(1);
        list.add(1);
        list.add(2);

    OptionalInt value=list.stream().mapToInt(Integer::intValue).max();


    boolean v=value.isPresent();
        System.out.println(value);
ouput:
---------
OptionalInt[2]

7.    List<Emp> emps=new ArrayList<>();
        emps.add(new Emp(1,"bala",2000));
        emps.add(new Emp(2,"krish",8300));
        emps.add(new Emp(3,"bala",288000));
        emps.add(new Emp(4,"krish",8300));
        emps.add(new Emp(5,"bala",200880));
        emps.add(new Emp(6,"krish",30880));
       List<Double> emps1= emps.stream().map(n ->n.getSal()*3).collect(Collectors.toList());
        System.out.println(emps1)

ouput:
---------
[6000.0, 24900.0, 864000.0, 24900.0, 602640.0, 92640.0]

8.   List<Integer> list= Arrays.asList(1,2,3,4,5,6,7,8,9,10);

   List<Integer> evenNOS=list.stream()
                .filter(n->n%2==0)
                .map(n->n*n)
                .collect(Collectors.toList());


        System.out.println(evenNOS);

ouput:
---------
[4, 16, 36, 64, 100]

9.    List<Person> people=new ArrayList<>();
        people.add(new Person("bala","tn",19));
        people.add(new Person("sanjay","tn",20));
        people.add(new Person("surya","tn",23));
        people.add(new Person("sathya","tn",24));
        people.add(new Person("saurav","tn",18));

     Person people1= people.stream()
                .filter(a->a.getName().startsWith("s")&& a.getAge()==18)
                .findAny()
                .orElse(null);
        System.out.println(people1);

ouput:
---------
Person{name='saurav', place='tn', age=18}

10.
   List<String> strings=new ArrayList<String>();
        strings.add("bala");
        strings.add("krish");
        strings.add("das");
        strings.add("bgn");
        strings.add("ggd");

        //skip funcrion
       Stream<String> sk= strings.stream();
       sk= sk.skip(3);
       sk.forEach(System.out::println);

ouput:
---------
bgn
ggd

11.Stream.of("ava","bala","sanajy")
                .sorted()
                .findFirst()
                .ifPresent(System.out::println);


ouput:
---------
ava

12.  List<Integer> marks= new ArrayList<>();
        marks.add(111);
        marks.add(231111111);
        marks.add(341);


       int nos= (int) marks.stream().filter(m->m>20).count();
        System.out.println(nos);


        List<Integer> sort=marks.stream().sorted().collect(Collectors.toList());
        System.out.println(sort);
ouput:
---------
3
[111, 341, 231111111]

13. List<Mobile> mobiles=new ArrayList<>();
        mobiles.add(new Mobile(1,"Asus",100000));
        mobiles.add(new Mobile(2,"Redmi",20000));
        mobiles.add(new Mobile(4,"Lava",150000));
        mobiles.add(new Mobile(3,"Honour",3400));

       mobiles.stream().map(Mobile::getId).sorted().forEach(System.out::println);


       List<String> s=mobiles.stream().map(Mobile::getName).sorted((c,d)->(c.compareTo(d))).collect(Collectors.toList());
        System.out.println(s);

       List<Double> doubles=   mobiles.stream().map(Mobile::getAmount).sorted((e,f)->(-e.compareTo(f))).collect(Collectors.toList());
        System.out.println(doubles);

ouput:
---------
1
2
3
4
[Asus, Honour, Lava, Redmi]
[150000.0, 100000.0, 20000.0, 3400.0]

14.   List<String> list = new ArrayList<>();
        list.add("bala krishnan");
        list.add("sanjay");
        list.add("sathya narayanana");
        list.add("mahendra singh dhoni");
        list.add("virat kohli");

        Comparator<String> cl= (a,b)->{
            int p=a.length();
            int q=b.length();
            if(p<q) return -1;
            else if(q<p) return 1;
            else return a.compareTo(b);
        };
       List<String> al= list.stream().sorted(cl).collect(Collectors.toList());
        System.out.println(al);

output:
-------
[sanjay, virat kohli, bala krishnan, sathya narayanana, mahendra singh dhoni]

15. List<Mobile> mobiles=new ArrayList<>();
        mobiles.add(new Mobile(1,"bala",1000));
        mobiles.add(new Mobile(2,"sachin",392020));
        mobiles.add(new Mobile(3,"abb",223322));
        mobiles.add(new Mobile(4,"anjay",454));
        mobiles.add(new Mobile(5,"ahsisss",9824));

        List<Integer> al=mobiles.stream().map(Mobile::getId).sorted((a,b)->b.compareTo(a)).collect(Collectors.toList());
        System.out.println(al);

        List<String> a2=mobiles.stream().map(Mobile::getName).sorted((a,b)->b.compareTo(a)).collect(Collectors.toList());
        System.out.println(a2);

        List<Double> a3= mobiles.stream().map(Mobile::getAmount).sorted((a,b)->b.compareTo(a)).collect(Collectors.toList());
        System.out.println(a3);

        Comparator<String> c=(a,b)->{
            int p=a.length();
            int q=b.length();
            if(p<q) return -1;
            else if(p>q) return 1;
            else return a.compareTo(b);
        };

        List<String> a4=
                mobiles.stream().map(Mobile::getName).sorted(c).collect(Collectors.toList());
        System.out.println(a4);
    }

output:
------
[5, 4, 3, 2, 1]
[sachin, bala, anjay, ahsisss, abb]
[392020.0, 223322.0, 9824.0, 1000.0, 454.0]
[abb, bala, anjay, sachin, ahsisss]

16.   List<Integer> list=new ArrayList<>();
        list.add(12);
        list.add(23);
        list.add(12311);
        list.add(00);
        list.add(23112);
        list.add(3333);
        list.add(768);

        Integer i=  list.stream().min((a,b)->a.compareTo(b)).get();
        System.out.println(i);

        Integer i1=  list.stream().min((a,b)->-a.compareTo(b)).get();
        System.out.println(i1);

        Integer s= list.stream().max((a,b)-> a.compareTo(b)).get();
        System.out.println(s);

        Integer s1= list.stream().max((a,b)-> -a.compareTo(b)).get();
        System.out.println(s1);

output:
------
0
23112
23112
0

17.  List<Mobile> mobiles=new ArrayList<>();
        mobiles.add(new Mobile(1,"bala",1000));
        mobiles.add(new Mobile(1,"bala",0000));
        mobiles.add(new Mobile(1,"bala",3453));
        mobiles.add(new Mobile(1,"bala",42535));
        mobiles.add(new Mobile(1,"bala",1232442));
        mobiles.add(new Mobile(1,"bala",44));

      Double list=  mobiles.stream().map(Mobile::getAmount).min((a,b)->a.compareTo(b)).get();
        System.out.println(list);

      Double list1= mobiles.stream().map(Mobile::getAmount).max((a,b)->a.compareTo(b)).get();
        System.out.println(list1);

output:
-------
0.0
1232442.0

18.
 List<Integer> al= Arrays.asList(1,3,212,35,12,44);

        Consumer<Integer> c=(i->{
            System.out.println("square of"+i+"="+i*i);
        });
        al.stream().forEach(c);

ouput:
------square of1=1
square of3=9
square of212=44944
square of35=1225
square of12=144
square of44=1936

19.




